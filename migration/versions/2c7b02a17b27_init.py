"""init

Revision ID: 2c7b02a17b27
Revises: 
Create Date: 2025-04-10 22:03:30.995937

"""
from typing import Sequence, Union

from alembic import op
from sqlalchemy.sql import table, column
import sqlalchemy as sa
from app.models import Locate, Place, Result, Sex


# revision identifiers, used by Alembic.
revision: str = '2c7b02a17b27'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('dic_locate',
    sa.Column('s_name', sa.String(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    op.create_index(op.f('ix_public_dic_locate_s_name'), 'dic_locate', ['s_name'], unique=True, schema='public')
    op.create_table('dic_place',
    sa.Column('s_name', sa.String(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    op.create_index(op.f('ix_public_dic_place_s_name'), 'dic_place', ['s_name'], unique=True, schema='public')
    op.create_table('dic_result',
    sa.Column('s_name', sa.String(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    op.create_index(op.f('ix_public_dic_result_s_name'), 'dic_result', ['s_name'], unique=True, schema='public')
    op.create_table('dic_sex',
    sa.Column('s_name', sa.String(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    op.create_index(op.f('ix_public_dic_sex_s_name'), 'dic_sex', ['s_name'], unique=True, schema='public')
    op.create_table('user',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('password_hash', sa.String(), nullable=False),
    sa.Column('role', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    op.create_index(op.f('ix_public_user_email'), 'user', ['email'], unique=True, schema='public')
    op.create_table('slr_case',
    sa.Column('d_slr', sa.Date(), nullable=False),
    sa.Column('result_id', sa.Integer(), nullable=False),
    sa.Column('sex_id', sa.Integer(), nullable=False),
    sa.Column('place_id', sa.Integer(), nullable=False),
    sa.Column('d_bdate', sa.Date(), nullable=True),
    sa.Column('locate_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('deleted', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['locate_id'], ['public.dic_locate.id'], ),
    sa.ForeignKeyConstraint(['place_id'], ['public.dic_place.id'], ),
    sa.ForeignKeyConstraint(['result_id'], ['public.dic_result.id'], ),
    sa.ForeignKeyConstraint(['sex_id'], ['public.dic_sex.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['public.user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    #generate data
    op.bulk_insert(
        table("dic_locate", column("s_name", sa.String)),
        [
            {
                "s_name": "К западу от гор"
            },
            {
                "s_name": "К востоку от гор"
            },
        ],
    )
    op.bulk_insert(
        table("dic_sex", column("s_name", sa.String)),
        [
            {
                "s_name": "М"
            },
            {
                "s_name": "Ж"
            },
        ],
    )
    op.bulk_insert(
        table("dic_result", column("s_name", sa.String)),
        [
            {
                "s_name": "Оживление"
            },
            {
                "s_name": "Смерть"
            },
        ],
    )
    op.bulk_insert(
        table("dic_place", column("s_name", sa.String)),
        [
            {
                "s_name": "Больница"
            },
            {
                "s_name": "СМП"
            },
        ],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('slr_case', schema='public')
    op.drop_index(op.f('ix_public_user_email'), table_name='user', schema='public')
    op.drop_table('user', schema='public')
    op.drop_index(op.f('ix_public_dic_sex_s_name'), table_name='dic_sex', schema='public')
    op.drop_table('dic_sex', schema='public')
    op.drop_index(op.f('ix_public_dic_result_s_name'), table_name='dic_result', schema='public')
    op.drop_table('dic_result', schema='public')
    op.drop_index(op.f('ix_public_dic_place_s_name'), table_name='dic_place', schema='public')
    op.drop_table('dic_place', schema='public')
    op.drop_index(op.f('ix_public_dic_locate_s_name'), table_name='dic_locate', schema='public')
    op.drop_table('dic_locate', schema='public')
    # ### end Alembic commands ###
